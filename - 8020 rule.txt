 - 80/20 rule 
 - kiss


website : 

	- 


layout - user friendly
	- break content into rows and cols
	- flex box
	- size and spacing lookout, use the number 4, any size or space used must be divisible by 4
	- consistency

	- component based design : 
		- layout, fonts, colours, icons, buttons
	


	- dark mode toggle


	typography : 	- max 3 fonts
			- fonts, knowing what size to use : use typescale.com, enter body font
			- after getting header right, make body font the same size, identify 				important part of the website and make them bigger
			- legality over aesthetics
			- when in doubt use these fonts : inter, Montserrat, dm sans, raleway, 				Roboto
			

			--TT new pixel, Suisse int'l
	colours : 
		- at least 4 incl. b/w
		- less is more
		- repeat over and over
		- stick w/ b + w and add an accent for more personality - buttons, borders, 		gradient
		- play with hsl code

	images : 
		- icons + images make things easier to understand
		- iconfinder, icons8, pexels - free icons
		- unsplash, freepik, flaticon
		- less is more be intentful


	content : 
		- content is king



design : 

	audience : job req : 

			- skill, professionalism, initiative
			- clean, functional design : mobile support
			- about me
			- PROJECT SECTIONS : name, desc, tech used, live demp, source code, 			challenges, videos, gifs
			- technical skills stack : consider grouping by category, talk sbout 			what you can confidently talk about in an interview
 			- contact info : email, linkedin, GitHub, contact form maybe
			- nice to hav: resume download, testimonials, blog?

			
			Gameplay UI  SWE:
			- Concise technical summary: What is it? What were you responsible for?

			- Key challenges solved (e.g., pathfinding, input handling, UI state management)

			- Tech used: Unity (C#), Unreal (C++/Blueprint), SDL, OpenGL, etc.

GIFs/videos/screenshots â€“ critical for gameplay/UI

			- Code link (GitHub) â€” well-organized, readable, modular

			- If possible, include:

			- Dev logs or blog-style writeups

			- Performance optimizations you implemented

			- How you structured your code (e.g., ECS, MVC)

ðŸ’¡ 						- 1â€“3 polished, technically rich projects are enough if they're detailed and well-presented. 
			
	sell me :



design stdep : think, plan research
		- make a repeatable design
		- break page into sections 
		- hero section : answer : problem you are solving - heading, short para, picture, call to action
		- explain what you're selling
		
website : 80% design, 20% code
code